<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/home/gabriele/Desktop/Apache jmeter/apache-jmeter-5.6.2/lib/postgresql-42.6.0.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostgreSQL " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">3</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">pg_test</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://127.0.0.1:5432/dmproject</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">password</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">postgres</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Similar User" enabled="true">
          <stringProp name="dataSource">pg_test</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">-- Get users that have read at least 5 common books
SELECT u1.userid AS user1, u2.userid AS user2, COUNT(DISTINCT r1.isbn) as common_read
FROM user_data u1 
INNER JOIN user_data u2 ON u1.userid &lt; u2.userid
INNER JOIN rating r1 ON u1.userid = r1.uid
INNER JOIN rating r2 ON u2.userid = r2.uid
WHERE r1.isbn = r2.isbn
GROUP BY u1.userid, u2.userid
HAVING COUNT(DISTINCT r1.isbn) &gt;= 5 LIMIT 100;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Highest book" enabled="true">
          <stringProp name="dataSource">pg_test</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">-- Get the book with the highest number of read 
WITH ratedBooks AS (
	SELECT r.isbn, count(r.isbn) as readCount
	FROM rating r 
	LEFT JOIN book b ON r.isbn = b.isbn
	GROUP BY r.isbn
	ORDER BY readCount DESC
	LIMIT 10
)
SELECT book.title, readCount
FROM book JOIN ratedBooks ON ratedBooks.isbn = book.isbn;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Highest book by rating for country" enabled="true">
          <stringProp name="dataSource">pg_test</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">-- Get for every country the books with the highest rating
WITH country_count AS (
	-- Get the user count for every country
	SELECT country, count(*) as user_count
	FROM user_data
	WHERE country is not NULL and province is not NULL
	GROUP BY country
	ORDER BY user_count DESC
	LIMIT 10
),
ranked_books AS (
    SELECT
        ud.country,
        b.title AS book_title,
        COUNT(r.uid) AS rating_count,
        RANK() OVER (PARTITION BY ud.country ORDER BY COUNT(r.uid) DESC) AS rating_rank
    FROM
        user_data ud
	
    INNER JOIN
        rating r ON ud.userid = r.uid
    INNER JOIN
        book b ON r.isbn = b.isbn
    GROUP BY
        ud.country, b.title
)
SELECT rb.country,rb.book_title
FROM ranked_books rb
WHERE rb.rating_rank = 1
	and rb.country in (select country from country_count);</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Book by title" enabled="true">
          <stringProp name="dataSource">pg_test</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT * FROM book WHERE LOWER(title) LIKE LOWER(&apos;%potter%&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Insert user" enabled="false">
          <stringProp name="dataSource">pg_test</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">call insert_test_user();
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="RespTimeGraph.interval">1000</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Neo4j" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BoltConnectionElement guiclass="TestBeanGUI" testclass="BoltConnectionElement" testname="Bolt Connection Configuration" enabled="true">
          <stringProp name="boltUri">bolt://localhost:7687</stringProp>
          <intProp name="maxConnectionPoolSize">500</intProp>
          <stringProp name="password">password</stringProp>
          <stringProp name="username">neo4j</stringProp>
        </BoltConnectionElement>
        <hashTree/>
        <BoltSampler guiclass="TestBeanGUI" testclass="BoltSampler" testname="Similar User" enabled="false">
          <stringProp name="accessMode">READ</stringProp>
          <stringProp name="cypher">// Get users that have read at least 5 common books
MATCH (u1:User)-[r1:RATED]-&gt;(b:Book)&lt;-[r2:RATED]-(u2:User)
WHERE u1.userId &lt;&gt; u2.userId
WITH count(distinct b.isbn) as common_read, u1, u2
WHERE common_read &gt;= 5 
RETURN u1.userId as u1 ,u2.userId as u2, common_read
LIMIT 100
</stringProp>
          <stringProp name="params">{&quot;paramName&quot;:&quot;paramValue&quot;}</stringProp>
          <boolProp name="recordQueryResults">false</boolProp>
          <intProp name="txTimeout">60</intProp>
        </BoltSampler>
        <hashTree/>
        <BoltSampler guiclass="TestBeanGUI" testclass="BoltSampler" testname="Highest book" enabled="false">
          <stringProp name="accessMode">READ</stringProp>
          <stringProp name="cypher">// Get the book with the highest number of read --&gt; 394 ms
MATCH ()-[r:RATED]-&gt;(b:Book)
WITH b, count(*) as read_count
ORDER by read_count DESC LIMIT 10
RETURN b.title as Title, read_count</stringProp>
          <stringProp name="params">{&quot;paramName&quot;:&quot;paramValue&quot;}</stringProp>
          <boolProp name="recordQueryResults">false</boolProp>
          <intProp name="txTimeout">60</intProp>
        </BoltSampler>
        <hashTree/>
        <BoltSampler guiclass="TestBeanGUI" testclass="BoltSampler" testname="Highest book by rating for country" enabled="false">
          <stringProp name="accessMode">READ</stringProp>
          <stringProp name="cypher">MATCH (l:Location)&lt;-[:LIVES_IN]-(u:User)
WITH l.country AS country, count(u) AS user_count
ORDER BY user_count DESC LIMIT 10
MATCH  (location:Location {country: country})&lt;-[:LIVES_IN]-(user)-[r:RATED]-&gt;(book:Book)
WITH location.country AS country, book, COUNT(r) AS ratingCount
ORDER BY country, ratingCount DESC
WITH country, COLLECT({book: book, ratingCount: ratingCount})[0] AS topBook
RETURN country, topBook.book.title AS TopBookTitle</stringProp>
          <stringProp name="params">{&quot;paramName&quot;:&quot;paramValue&quot;}</stringProp>
          <boolProp name="recordQueryResults">false</boolProp>
          <intProp name="txTimeout">60</intProp>
        </BoltSampler>
        <hashTree/>
        <BoltSampler guiclass="TestBeanGUI" testclass="BoltSampler" testname="Book by title" enabled="false">
          <stringProp name="accessMode">READ</stringProp>
          <stringProp name="cypher">// Return a book node by passing a part of the title or the whole title
MATCH (book:Book)
WHERE toLower(book.title) =~ toLower(&apos;.*potter.*&apos;)  // Replace &apos;Potter&apos; with your search term
RETURN book</stringProp>
          <stringProp name="params">{&quot;paramName&quot;:&quot;paramValue&quot;}</stringProp>
          <boolProp name="recordQueryResults">false</boolProp>
          <intProp name="txTimeout">60</intProp>
        </BoltSampler>
        <hashTree/>
        <BoltSampler guiclass="TestBeanGUI" testclass="BoltSampler" testname="Insert user" enabled="true">
          <stringProp name="cypher">CREATE (u:User)
SET  u.age = toInteger(rand() * 100), u.test = True,
     u.userId = toInteger(rand() * (290000 - 500000 + 1)) + 500000
      
// Create for the newly added user a RATED relationship with 3 random books
WITH u
MATCH (b:Book)
WITH b, RAND() AS random, u
ORDER BY random LIMIT 3
WITH b, u
CREATE (u)-[r:RATED]-&gt;(b)
SET r.rating = toInteger(rand() * 10), r.test = True
</stringProp>
          <stringProp name="params">{&quot;paramName&quot;:&quot;paramValue&quot;}</stringProp>
          <boolProp name="recordQueryResults">false</boolProp>
          <stringProp name="accessMode">WRITE</stringProp>
          <stringProp name="database">neo4j</stringProp>
          <intProp name="txTimeout">60</intProp>
        </BoltSampler>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="RespTimeGraph.interval">3000</stringProp>
          <stringProp name="RespTimeGraph.yaxisscalemaxvalue">100</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
